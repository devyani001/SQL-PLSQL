        Que.8           - 30 Aug 2025(night 12.51 am)
    REVISE SQL FROM GFG before SOLVING this JOINS
=====================================================
1581. Customer Who Visited but Did Not Make Any Transactions
Easy
=================================================================
Table: Visits

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| visit_id    | int     |
| customer_id | int     |
+-------------+---------+
visit_id is the column with unique values for this table.
This table contains information about the customers who visited the mall.
 
Table: Transactions

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| transaction_id | int     |
| visit_id       | int     |
| amount         | int     |
+----------------+---------+
transaction_id is column with unique values for this table.
This table contains information about the transactions made during the visit_id.
 

Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.
Return the result table sorted in any order.

The result format is in the following example.

Example 1:
============
Input: 
Visits
+----------+-------------+
| visit_id | customer_id |
+----------+-------------+
| 1        | 23          |
| 2        | 9           |
| 4        | 30          |
| 5        | 54          |
| 6        | 96          |
| 7        | 54          |
| 8        | 54          |
+----------+-------------+
Transactions
+----------------+----------+--------+
| transaction_id | visit_id | amount |
+----------------+----------+--------+
| 2              | 5        | 310    |
| 3              | 5        | 300    |
| 9              | 5        | 200    |
| 12             | 1        | 910    |
| 13             | 2        | 970    |
+----------------+----------+--------+

Output: 
+-------------+----------------+
| customer_id | count_no_trans |
+-------------+----------------+
| 54          | 2              |
| 30          | 1              |
| 96          | 1              |
+-------------+----------------+

Explanation: 
Customer with id = 23 visited the mall once and made one transaction during the visit with id = 12.
Customer with id = 9 visited the mall once and made one transaction during the visit with id = 13.
Customer with id = 30 visited the mall once and did not make any transactions.
Customer with id = 54 visited the mall three times. During 2 visits they did not make any transactions, and during one visit they made 3 transactions.
Customer with id = 96 visited the mall once and did not make any transactions.
As we can see, users with IDs 30 and 96 visited the mall one time without making any transactions. Also, user 54 visited the mall twice and did not make any transactions.


answer:
---------
# Write your MySQL query statement below
SELECT DISTINCT Visits.customer_id, COUNT(Visits.visit_id) AS count_no_trans FROM Visits LEFT JOIN Transactions ON Visits.visit_id = Transactions.visit_id WHERE Transactions.visit_id IS NULL GROUP BY Visits.customer_id;


what u learnt today ?
    MOST VVIP or IMP
---------------------------
GROUP BY - used to group or combine data
    ex:
        +-------------+----------------+
        | customer_id | count_no_trans |
        +-------------+----------------+
        | 54          | 1              |
        | 30          | 1              |
        | 96          | 2              |
        | 30          | 1              |
        +-------------+----------------+

    here customer_id = 30 is having 2 entries, if we do 'GROUP BY customer_id' then it will combine 2 entries in one row

    Step 3 — GROUP BY visits.customer_id
             Groups these remaining rows by customer_id.

            For example:
                Customer 30 → 2 visits (1+1)
                Customer 96 → 2 visits
                Customer 54 → 1 visit


Leetcode answer:
--------------------
SELECT 
  customer_id, 
  COUNT(visit_id) AS count_no_trans 
FROM 
  Visits 
WHERE 
  visit_id NOT IN (
    SELECT 
      visit_id 
    FROM 
      Transactions
  ) 
GROUP BY 
  customer_id